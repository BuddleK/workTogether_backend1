<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="myPageNormal">
	<!-- 페이지 입장 시 비밀번호 입력 -->
	<select id="checkPw" parameterType="map" resultType="int">
		SELECT
		COUNT(USERS_PASSWORD)
		FROM TBL_USERS
		WHERE USERS_PASSWORD =
		#{usersPassword} and users_number = #{usersNumber}
	</select>

	<!-- 회원정보 조회 -->
	<select id="normalSearch" resultType="NormalModifyDTO">
		SELECT
		u.USERS_NAME,
		n.NORMAL_USERS_LEVEL, u.USERS_POSTSAL_CODE, u.USERS_ADDRESS_LINE1,
		u.USERS_ADDRESS_LINE2,
		u.USERS_PHONE, u.USERS_ID, u.USERS_EMAIL,
		u.USERS_PASSWORD
		FROM tbl_users u
		JOIN
		tbl_normal_users n
		ON
		u.users_number = n.users_number
		WHERE u.users_number = #{usersNumber}
	</select>

	<!-- 회원정보 수정 -->
	<update id="normalModify" parameterType="NormalModifyDTO">
		UPDATE tbl_users
		SET
		users_postsal_code = #{usersPostsalCode},
		users_address_line1 =
		#{usersAddressLine1},
		users_address_line2 = #{usersAddressLine2},
		users_email = #{usersEmail},
		users_password = #{usersPassword}
		WHERE
		users_number = #{usersNumber}
	</update>

	<!-- 회원레벨 수정 -->
	<update id="normalLevelModify" parameterType="NormalModifyDTO">
		UPDATE
		tbl_normal_users
		SET normal_users_level = #{normalUsersLevel}
		WHERE
		users_number = #{usersNumber}
	</update>

	<!-- 찜한 목록 조회 -->
	<select id="normalfavoriteListSearch" parameterType="map"
		resultType="com.wt.app.dto.NormalFavoriteListDTO">
		<![CDATA[
		SELECT * FROM (
		SELECT ROWNUM AS rnum, subquery.*
		FROM (
		SELECT
		f.favorites_number AS favoritesNumber,
                s.shops_number AS shopsNumber,
                f.favorites_created_date AS favoriteCreatedDate,
                s.shops_name AS shopsName,
                s.shops_road_address AS shopsRoadAddress,
                s.shops_phone AS shopsPhone
            FROM tbl_normal_users n
            JOIN tbl_shops_favorites f ON n.users_number = f.users_number
            JOIN tbl_shops s ON f.favorites_shops_number = s.shops_number
            WHERE n.users_number = #{usersNumber}
		) subquery
		) WHERE rnum BETWEEN #{startRow} AND #{endRow}
		]]>
	</select>

	<!-- 찜 총 갯수 가져오기 -->
	<select id="getTotal" resultType="int">
		SELECT COUNT(favorites_number)
		FROM tbl_shops_favorites
	</select>

	<!-- 찜한 목록 삭제 -->
	<delete id="normalfavoriteListDelete" parameterType="int">
		DELETE FROM
		TBL_SHOPS_FAVORITES f
		WHERE
		f.favorites_number = #{favoritesNumber}

	</delete>

	<!-- 하트 목록 조회 -->
	<select id="normalHeartListSearch"
		resultType="NormalHeartListDTO">
		<![CDATA[
		SELECT * FROM (
		SELECT ROWNUM AS rnum, subquery.*
		FROM (
SELECT 
    c.users_number AS careNumber, h.hearts_normal_number,
    u.users_name,
    u.users_address_line1 ,
    c.care_intro_text,
    c.care_profiles_photo_number,
    fp.profiles_files_type,
    fp.profiles_files_name,
    fp.profiles_files_path,
    d.DAY_MONDAY,
    d.DAY_TUESDAY,
    d.DAY_WEDNESDAY,
    d.DAY_THURSDAY,
    d.DAY_FRIDAY,
    d.DAY_SATURDAY,
    d.DAY_SUNDAY
FROM
    tbl_hearts h
    JOIN tbl_care_users c ON h.hearts_care_number = c.users_number
    JOIN tbl_users u ON c.users_number = u.users_number
    LEFT JOIN tbl_files_profiles fp ON c.care_profiles_photo_number = fp.profiles_files_number
    LEFT JOIN tbl_day d ON c.users_number = d.users_number
WHERE 
    h.hearts_normal_number = #{normalNumber} 
    AND c.care_accept = 'Y'
ORDER BY 
    c.users_number
    ) subquery
		) WHERE rnum BETWEEN #{startRow} AND #{endRow}
		]]>
	</select>

	<select id="heartTotal" resultType="int">
		SELECT
		count(hearts_care_number) FROM tbl_hearts WHERE HEARTS_NORMAL_NUMBER
		=#{usersNumber}
	</select>


	<!-- 하트 목록 삭제 -->
	<delete id="deleteHeart" parameterType="int">
		delete from TBL_HEARTS
		where
		hearts_normal_number = #{heartsNormalNumber} and
		hearts_care_number = #{careNumber}
	</delete>

	<!-- 매칭 전체 기록 조회 -->
	<select id="normalMatchingSearch" resultType="NormalMatchingDTO">
		SELECT
		match_number,
		u1.USERS_NAME AS normalName,
		u2.USERS_NAME AS careName,
		to_char(m.match_date,'DD') as matchDate,
		m.MATCH_MATCH_TIME,
		m.MATCH_points,
		m.match_status,
		to_char(m.match_date,'MM') AS month
		FROM
		tbl_matchings m
		LEFT JOIN TBL_USERS u1
		ON u1.USERS_NUMBER =
		m.NORMAL_NUMBER
		LEFT JOIN TBL_USERS u2
		ON u2.USERS_NUMBER =
		m.CARE_NUMBER
		WHERE m.NORMAL_NUMBER = #{usersNumber}
	</select>

	<!-- 매칭 월별 기록 조회 -->
	<select id="monthNormalMatchingSearch"
		resultType="NormalMatchingDTO">
		SELECT
		match_number,
		u1.USERS_NAME AS normalName,
		u2.USERS_NAME AS careName,
		to_char(m.match_date,'DD') as matchDate,
		m.MATCH_MATCH_TIME,
		m.MATCH_points,
		m.match_status,
		to_char(m.match_date,'MM') AS month
		FROM tbl_matchings m
		LEFT JOIN
		TBL_USERS u1
		ON u1.USERS_NUMBER = m.NORMAL_NUMBER
		LEFT JOIN TBL_USERS u2
		ON u2.USERS_NUMBER = m.CARE_NUMBER
		WHERE m.NORMAL_NUMBER =
		#{usersNumber}
		and to_char(m.match_date,'MM') = #{month}
	</select>

	<delete id="deleteMatch" parameterType="int">
		DELETE FROM TBL_MATCHINGS
		WHERE MATCH_NUMBER = #{matchNumber}
	</delete>


	<!-- 매칭 번호를 통한 유저 조회 -->
	<select id="findMatching" resultType="NormalMatchingPointDTO">
		SELECT
		match_number,
		u1.USERS_number AS normalNumber,
		u2.USERS_number AS careNumber,
		m.MATCH_points,
		m.match_status
		FROM tbl_matchings m
		LEFT JOIN TBL_USERS
		u1
		ON u1.USERS_NUMBER = m.NORMAL_NUMBER
		LEFT JOIN TBL_USERS u2
		ON
		u2.USERS_NUMBER = m.CARE_NUMBER
		WHERE m.match_number = #{matchNumber}
	</select>

	<update id="minusPointNormal" parameterType="map">
		UPDATE TBL_USERS
		SET
		USERS_POINT=USERS_POINT - #{matchPoints}
		WHERE USERS_Number=
		#{normalNumber}
	</update>

	<update id="plusPointCare" parameterType="map">
		UPDATE TBL_USERS
		SET
		USERS_POINT=USERS_POINT + #{matchPoints}
		WHERE USERS_Number=
		#{careNumber}
	</update>

	<update id="updateStatus" parameterType="int">
		UPDATE TBL_MATCHINGS
		SET
		MATCH_STATUS='S'
		WHERE MATCH_NUMBER=#{matchNumber}
	</update>

	<!-- 쪽지 리스트 불러오기 -->
	<select id="selectAllMsg" parameterType="int"
		resultType="MessageSRDTO">
		<![CDATA[
		SELECT * FROM (
		SELECT ROWNUM AS rnum, subquery.*
		FROM (
		SELECT u.USERS_NAME usersName, m.* FROM TBL_MESSAGE m
		JOIN tbl_users u ON u.USERS_NUMBER = m.CARE_NUMBER
		WHERE m.SENDER_TYPE ='C' AND m.NORMAL_NUMBER = #{normalNumber}
		 ) subquery
		) WHERE rnum BETWEEN #{startRow} AND #{endRow}
		]]>
	</select>

	<!-- 내가 쓴 게시판 목록 조회 -->
	<select id="normalPostsListSearch" parameterType="int"
		resultType="NormalPostsListDTO">
		SELECT
		n.users_name,
		p.posts_title,
		p.posts_created_date
		FROM
		tbl_posts p
		JOIN TBL_normal_users n
		ON p.users_number = n.users_number
		WHERE p.users_number = #{usersNumber}
	</select>

	<!-- 내가 쓴 게시판 목록 삭제 -->
	<delete id="normalPostsListDelete"
		parameterType="NormalPostsListDTO">
		DELETE FROM tbl_posts
		WHERE posts_number = #{postsNumber}
		AND users_number = #{usersNumber}
	</delete>

	<!-- 문의 등록 -->
	<insert id="normalReferenceInsert"
		parameterType="NormalReferenceListDTO">
		<selectKey keyProperty="referenceNumber" resultType="int"
			order="BEFORE">
			SELECT seq_news_banners.nextVal FROM DUAL
		</selectKey>
		INSERT INTO tbl_reference
		VALUES ( #{referenceNumber},
		#{usersNumber},#{referenceTitle},
		#{referenceCreatedDate},#{referenceContent}, #{answeredYn})
	</insert>

	<!-- 문의 조회 -->
	<select id="normalReferenceListSearch"
		resultType="NormalReferenceListDTO">
		SELECT
		n.users_name,
		r.reference_title,
		r.reference_created_date,
		r.reference_answered_yn
		FROM tbl_reference r
		JOIN tbl_normal_users n
		ON r.reference_users_number = n.users_number
	</select>

	<!-- 일반 회원 탈퇴 -->
	<delete id="normalExit" parameterType="int">
		DELETE FROM
		TBL_NORMAL_USERS
		WHERE users_number = #{usersNumber}
	</delete>
</mapper>